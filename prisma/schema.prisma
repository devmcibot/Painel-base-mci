datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MEDICO
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum Status {
  ABERTA
  CONCLUIDA
  CANCELADA
  FALTOU
  REMARCADA
}

model User {
  id        Int        @id @default(autoincrement())
  role      Role       @default(MEDICO)
  status    UserStatus @default(ACTIVE)
  email     String     @unique
  name      String
  hashedPwd String
  createdAt DateTime   @default(now())
  updatedAt DateTime @updatedAt @default(now())
  medico    Medico?
}

model Medico {
  id        Int            @id @default(autoincrement())
  userId    Int            @unique
  crm       String?
  User      User           @relation(fields: [userId], references: [id])
  pacientes Paciente[]
  consultas Consulta[]
  eventos   AgendaEvento[]
  updatedAt DateTime @updatedAt @default(now())
}

model Paciente {
  id         Int       @id @default(autoincrement())
  medicoId   Int
  nome       String
  cpf        String    @unique
  email      String?
  telefone   String?
  nascimento DateTime?
  endereco   String?

  createdAt  DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())

  medico       Medico         @relation(fields: [medicoId], references: [id])
  consultas    Consulta[]
  AgendaEvento AgendaEvento[]

  @@index([medicoId])
}

model Consulta {
  id         Int      @id @default(autoincrement())
  medicoId   Int
  pacienteId Int
  data       DateTime
  status     Status   @default(ABERTA)

  // caminhos de arquivos no Storage (opcionais)
  pastaPath       String?
  preAnamnesePath String?
  audioPath       String?
  anamnesePath    String?
  relatorioPath   String?

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  medico       Medico         @relation(fields: [medicoId], references: [id], onDelete: Restrict)
  paciente     Paciente       @relation(fields: [pacienteId], references: [id], onDelete: Restrict)
  Transcript   Transcript[]
  AgendaEvento AgendaEvento[]
  ExternalLink ExternalLink[]

  @@index([medicoId])
  @@index([pacienteId])
  @@index([data])
  @@index([status])
}

model Transcript {
  id         Int      @id @default(autoincrement())
  consultaId Int
  text       String
  createdAt  DateTime @default(now())

  consulta   Consulta @relation(fields: [consultaId], references: [id], onDelete: Cascade)
}

model AgendaEvento {
  id         Int      @id @default(autoincrement())
  medicoId   Int
  pacienteId Int?
  consultaId Int?
  titulo     String
  inicio     DateTime
  fim        DateTime
  origem     String   // "whatsapp" | "manual" | "n8n"

  // Para eventos sincronizados sem consulta vinculada
  googleEventId    String?
  googleCalendarId String?

  medico   Medico    @relation(fields: [medicoId], references: [id])
  paciente Paciente? @relation(fields: [pacienteId], references: [id], onDelete: SetNull)
  consulta Consulta? @relation(fields: [consultaId], references: [id], onDelete: SetNull)

  @@index([medicoId])
  @@index([pacienteId])
  @@index([consultaId])
  @@unique([googleEventId, googleCalendarId])
}

model ExternalLink {
  id         Int      @id @default(autoincrement())
  consultaId Int
  provider   String   // "google"
  externalId String   // google_event_id
  calendarId String?

  consulta   Consulta @relation(fields: [consultaId], references: [id], onDelete: Cascade)

  @@index([consultaId])
  @@unique([provider, externalId])
  @@unique([consultaId, provider])
}
